From: Debian/Kubuntu Qt/KDE Maintainers <debian-qt-kde@lists.debian.org>
Date: Wed, 13 Apr 2016 16:40:33 +0200
Subject: findservicebydesktoppath_try_realfilepath

This patch is an attempt to make KDE find desktop files
and other stuff when /usr or anything else in the file
path is a symlink.
---
 kdecore/services/kservicefactory.cpp | 31 +++++++++++++++++++++++--------
 kdecore/services/kservicefactory.h   |  2 ++
 2 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/kdecore/services/kservicefactory.cpp b/kdecore/services/kservicefactory.cpp
index 834ff8b..606170d 100644
--- a/kdecore/services/kservicefactory.cpp
+++ b/kdecore/services/kservicefactory.cpp
@@ -124,22 +124,16 @@ KService::Ptr KServiceFactory::findServiceByDesktopName(const QString &_name)
     return newService;
 }
 
-KService::Ptr KServiceFactory::findServiceByDesktopPath(const QString &_name)
+KService::Ptr KServiceFactory::serviceFromPath(const QString &_name)
 {
-    if (!m_relNameDict) return KService::Ptr(); // Error!
-
-    // Warning : this assumes we're NOT building a database
-    // KBuildServiceFactory reimplements it for the case where we are building one
-
     int offset = m_relNameDict->find_string( _name );
     if (!offset) {
-        //kDebug(servicesDebugArea()) << "findServiceByDesktopPath:" << _name << "not found";
         return KService::Ptr(); // Not found
     }
 
     KService::Ptr newService(createEntry(offset));
     if (!newService) {
-        kDebug(servicesDebugArea()) << "findServiceByDesktopPath: createEntry failed!";
+        kDebug(servicesDebugArea()) << "serviceFromPath: createEntry failed!";
     }
     // Check whether the dictionary was right
     // It's ok that it's wrong, for the case where we're looking up an unknown service,
@@ -151,6 +145,27 @@ KService::Ptr KServiceFactory::findServiceByDesktopPath(const QString &_name)
     return newService;
 }
 
+KService::Ptr KServiceFactory::findServiceByDesktopPath(const QString &_name)
+{
+    if (!m_relNameDict) return KService::Ptr(); // Error!
+
+    // Warning : this assumes we're NOT building a database
+    // KBuildServiceFactory reimplements it for the case where we are building one
+
+    KService::Ptr newService(serviceFromPath(_name));
+    if (!newService) {
+        // We might have been given a symlink or non-canonical path of some sort.
+        // Therefore try looking up KStandardDirs::realFilePath'ed path too.
+        newService = serviceFromPath(KStandardDirs::realFilePath(_name));
+    }
+
+    if (!newService) {
+        kDebug(servicesDebugArea()) << _name << "not found";
+        return KService::Ptr(); // Not found
+    }
+    return newService;
+}
+
 KService::Ptr KServiceFactory::findServiceByMenuId(const QString &_menuId)
 {
     if (!m_menuIdDict) return KService::Ptr(); // Error!
diff --git a/kdecore/services/kservicefactory.h b/kdecore/services/kservicefactory.h
index 495f21d..1f12dce 100644
--- a/kdecore/services/kservicefactory.h
+++ b/kdecore/services/kservicefactory.h
@@ -121,6 +121,8 @@ protected:
     virtual void virtual_hook( int id, void* data );
 private:
     class KServiceFactoryPrivate* d;
+
+    KService::Ptr serviceFromPath(const QString &_name);
 };
 
 #endif
