commit e36051fd7cf46093bf96cb5eb987102a605be52a
Author: Heiko Becker <heirecka@exherbo.org>
Date:   Tue May 17 18:08:42 2016 +0200

    Fix compilation with gcc6
    
    This basically backports 3c38c2bba3dc2313fa95ff99c76aae3870e0a168
    from solid (from the frameworks branch of kdelibs before the split).
    
    This is not enough to successfully compile with gcc-6, but it's at
    least one error less.
    
    REVIEW: 128160

diff --git a/solid/solid/backends/shared/cpufeatures.cpp b/solid/solid/backends/shared/cpufeatures.cpp
index baa1af2..05acbf7 100644
--- a/solid/solid/backends/shared/cpufeatures.cpp
+++ b/solid/solid/backends/shared/cpufeatures.cpp
@@ -51,23 +51,23 @@ static void sighandler( int )
 #endif
 
 #ifdef __i386__
-  #define ASM_REG(reg)              "%e"reg
-  #define ASM_POP(reg)              "popl   %%e"reg"             \n\t"
-  #define ASM_PUSH(reg)             "pushl  %%e"reg"             \n\t"
-  #define ASM_XOR_REG(reg1, reg2)   "xorl   %%e"reg1", %%e"reg2" \n\t"
-  #define ASM_XOR_VAR(var, reg)     "xorl   "var",     %%e"reg"  \n\t"
-  #define ASM_CMP_REG(reg1, reg2)   "cmpl   %%e"reg1", %%e"reg2" \n\t"
-  #define ASM_MOV_REG(reg1, reg2)   "movl   %%e"reg1", %%e"reg2" \n\t"
-  #define ASM_MOV_VAR(var, reg)     "movl   "var",     %%e"reg"  \n\t"
+  #define ASM_REG(reg)              "%e" reg
+  #define ASM_POP(reg)              "popl   %%e" reg "             \n\t"
+  #define ASM_PUSH(reg)             "pushl  %%e" reg "             \n\t"
+  #define ASM_XOR_REG(reg1, reg2)   "xorl   %%e" reg1 ", %%e" reg2 " \n\t"
+  #define ASM_XOR_VAR(var, reg)     "xorl   " var ",     %%e" reg "  \n\t"
+  #define ASM_CMP_REG(reg1, reg2)   "cmpl   %%e" reg1 ", %%e" reg2 " \n\t"
+  #define ASM_MOV_REG(reg1, reg2)   "movl   %%e" reg1 ", %%e" reg2 " \n\t"
+  #define ASM_MOV_VAR(var, reg)     "movl   " var ",     %%e" reg "  \n\t"
 #elif defined(__x86_64__)
-  #define ASM_REG(reg)              "%r"reg
-  #define ASM_POP(reg)              "popq   %%r"reg"             \n\t"
-  #define ASM_PUSH(reg)             "pushq  %%r"reg"             \n\t"
-  #define ASM_XOR_REG(reg1, reg2)   "xorq   %%r"reg1", %%r"reg2" \n\t"
-  #define ASM_XOR_VAR(var, reg)     "xorq   "var",     %%r"reg"  \n\t"
-  #define ASM_CMP_REG(reg1, reg2)   "cmpq   %%r"reg1", %%r"reg2" \n\t"
-  #define ASM_MOV_REG(reg1, reg2)   "movq   %%r"reg1", %%r"reg2" \n\t"
-  #define ASM_MOV_VAR(var, reg)     "movq   "var",     %%r"reg"  \n\t"
+  #define ASM_REG(reg)              "%r" reg
+  #define ASM_POP(reg)              "popq   %%r" reg "             \n\t"
+  #define ASM_PUSH(reg)             "pushq  %%r" reg "             \n\t"
+  #define ASM_XOR_REG(reg1, reg2)   "xorq   %%r" reg1 ", %%r" reg2 " \n\t"
+  #define ASM_XOR_VAR(var, reg)     "xorq   " var ",     %%r" reg "  \n\t"
+  #define ASM_CMP_REG(reg1, reg2)   "cmpq   %%r" reg1 ", %%r" reg2 " \n\t"
+  #define ASM_MOV_REG(reg1, reg2)   "movq   %%r" reg1 ", %%r" reg2 " \n\t"
+  #define ASM_MOV_VAR(var, reg)     "movq   " var ",     %%r" reg "  \n\t"
 #endif
 
 #ifdef __PPC__
